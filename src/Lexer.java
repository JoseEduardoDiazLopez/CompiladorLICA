// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\4\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\11\21\1\22\1\0"+
    "\1\23\1\24\1\25\2\0\3\26\1\27\1\30\1\31"+
    "\24\26\1\32\1\0\1\33\1\0\1\34\1\0\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\26\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\7\0\1\3\73\0\1\26"+
    "\7\0\1\26\3\0\1\26\3\0\1\26\1\0\1\26"+
    "\6\0\1\26\1\0\1\26\4\0\1\26\7\0\1\26"+
    "\3\0\1\26\3\0\1\26\1\0\1\26\6\0\1\26"+
    "\1\0\1\26\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\6\22\1\25"+
    "\14\22\1\26\1\1\1\27\1\0\1\30\1\0\1\2"+
    "\1\0\1\22\1\31\1\32\1\33\1\34\27\22\1\35"+
    "\10\22\1\36\6\22\1\37\2\0\1\22\1\40\12\22"+
    "\1\41\5\22\1\42\2\22\1\43\25\22\1\41\10\22"+
    "\1\0\1\2\1\0\6\22\1\44\16\22\1\45\3\22"+
    "\1\46\24\22\1\47\1\0\2\22\1\50\3\22\1\51"+
    "\7\22\1\52\1\53\1\22\1\54\7\22\1\47\4\22"+
    "\1\55\2\22\1\56\6\22\1\0\2\22\1\57\13\22"+
    "\1\60\5\22\1\61\3\22\1\0\5\22\1\62\1\63"+
    "\6\22\1\64\4\22\1\0\2\22\1\65\3\22\1\66"+
    "\11\22\1\67\2\22\1\70\1\22\1\71\6\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\71\0\162\0\71\0\71\0\253\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\344\0\u011d"+
    "\0\u0156\0\71\0\u018f\0\u01c8\0\u0201\0\u023a\0\71\0\71"+
    "\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402"+
    "\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca"+
    "\0\u0603\0\u063c\0\u0675\0\71\0\u06ae\0\71\0\253\0\71"+
    "\0\u06e7\0\u0720\0\u0759\0\u0156\0\71\0\71\0\71\0\u0792"+
    "\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u023a"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\71"+
    "\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0"+
    "\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u023a\0\u135f"+
    "\0\u1398\0\u13d1\0\u140a\0\u1443\0\u023a\0\u147c\0\u14b5\0\u023a"+
    "\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d"+
    "\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1041"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u023a"+
    "\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u023a\0\u2082"+
    "\0\u20bb\0\u20f4\0\u023a\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211"+
    "\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9"+
    "\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u023a"+
    "\0\u25a1\0\u25da\0\u2613\0\u023a\0\u264c\0\u2685\0\u26be\0\u023a"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u023a"+
    "\0\u023a\0\u2886\0\u023a\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3"+
    "\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u023a"+
    "\0\u2b6b\0\u2ba4\0\u023a\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1"+
    "\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u023a\0\u2dde\0\u2e17\0\u2e50"+
    "\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018"+
    "\0\u023a\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u023a\0\u316e"+
    "\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336"+
    "\0\u023a\0\u023a\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c"+
    "\0\u023a\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b"+
    "\0\u023a\0\u3654\0\u368d\0\u36c6\0\u023a\0\u36ff\0\u3738\0\u3771"+
    "\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7\0\u023a\0\u3900"+
    "\0\u3939\0\u023a\0\u3972\0\u023a\0\u39ab\0\u39e4\0\u3a1d\0\u3a56"+
    "\0\u3a8f\0\u3ac8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\4\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\26\1\41\1\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\26\1\50\1\51\1\52\1\26\1\53\3\26"+
    "\1\54\1\55\1\56\73\0\1\3\67\0\2\57\1\0"+
    "\1\57\2\0\1\60\10\0\2\57\4\0\4\57\2\0"+
    "\32\57\15\0\1\61\4\0\1\62\67\0\1\63\1\0"+
    "\2\64\65\0\1\63\1\0\2\21\73\0\1\65\70\0"+
    "\1\66\70\0\1\67\64\0\2\26\4\0\4\26\2\0"+
    "\32\26\23\0\2\26\4\0\4\70\2\0\32\70\23\0"+
    "\2\26\4\0\4\26\2\0\3\26\1\71\14\26\1\72"+
    "\11\26\23\0\2\26\4\0\4\26\2\0\17\26\1\73"+
    "\12\26\23\0\2\26\4\0\4\26\2\0\1\26\1\74"+
    "\7\26\1\75\5\26\1\76\12\26\23\0\2\26\4\0"+
    "\4\26\2\0\5\26\1\77\24\26\23\0\2\26\4\0"+
    "\4\26\2\0\16\26\1\100\4\26\1\101\3\26\1\102"+
    "\2\26\23\0\2\26\4\0\4\26\2\0\1\26\1\103"+
    "\3\26\1\104\3\26\1\105\2\26\1\106\5\26\1\107"+
    "\2\26\1\110\4\26\23\0\2\26\4\0\4\26\2\0"+
    "\11\26\1\111\20\26\23\0\2\26\4\0\4\26\2\0"+
    "\15\26\1\112\1\113\13\26\23\0\2\26\4\0\4\26"+
    "\2\0\11\26\1\114\20\26\23\0\2\26\4\0\4\26"+
    "\2\0\5\26\1\115\24\26\23\0\2\26\4\0\4\26"+
    "\2\0\11\26\1\116\5\26\1\117\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\120\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\2\26\1\121\15\26\1\122\11\26"+
    "\23\0\2\26\4\0\4\26\2\0\17\26\1\123\2\26"+
    "\1\124\7\26\23\0\2\26\4\0\4\26\2\0\1\26"+
    "\1\125\3\26\1\126\11\26\1\127\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\5\26\1\130\3\26\1\131\20\26"+
    "\23\0\2\26\4\0\4\26\2\0\1\26\1\132\3\26"+
    "\1\133\3\26\1\134\5\26\1\135\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\5\26\1\136\11\26\1\137\12\26"+
    "\72\0\1\140\1\0\12\141\1\142\56\141\2\62\1\3"+
    "\1\62\1\4\64\62\16\0\1\143\1\0\2\144\67\0"+
    "\2\70\4\0\4\70\2\0\32\70\23\0\2\26\4\0"+
    "\4\26\2\0\5\26\1\145\24\26\23\0\2\26\4\0"+
    "\4\26\2\0\1\26\1\146\30\26\23\0\2\26\4\0"+
    "\4\26\2\0\2\26\1\147\14\26\1\150\12\26\23\0"+
    "\2\26\4\0\4\26\2\0\4\26\1\151\16\26\1\152"+
    "\6\26\23\0\2\26\4\0\4\26\2\0\3\26\1\153"+
    "\10\26\1\154\15\26\23\0\2\26\4\0\4\26\2\0"+
    "\16\26\1\155\1\156\3\26\1\157\6\26\23\0\2\26"+
    "\4\0\4\26\2\0\6\26\1\160\15\26\1\161\5\26"+
    "\23\0\2\26\4\0\4\26\2\0\3\26\1\162\20\26"+
    "\1\163\5\26\23\0\2\26\4\0\4\26\2\0\20\26"+
    "\1\164\11\26\23\0\2\26\4\0\4\26\2\0\20\26"+
    "\1\165\11\26\23\0\2\26\4\0\4\26\2\0\14\26"+
    "\1\166\15\26\23\0\2\26\4\0\4\26\2\0\3\26"+
    "\1\167\26\26\23\0\2\26\4\0\4\26\2\0\16\26"+
    "\1\170\13\26\23\0\2\26\4\0\4\26\2\0\17\26"+
    "\1\171\12\26\23\0\2\26\4\0\4\26\2\0\5\26"+
    "\1\172\24\26\23\0\2\26\4\0\4\26\2\0\16\26"+
    "\1\173\13\26\23\0\2\26\4\0\4\26\2\0\22\26"+
    "\1\174\7\26\23\0\2\26\4\0\4\26\2\0\20\26"+
    "\1\175\11\26\23\0\2\26\4\0\4\26\2\0\30\26"+
    "\1\176\1\26\23\0\2\26\4\0\4\26\2\0\14\26"+
    "\1\177\15\26\23\0\2\26\4\0\4\26\2\0\5\26"+
    "\1\200\24\26\23\0\2\26\4\0\4\26\2\0\5\26"+
    "\1\201\24\26\23\0\2\26\4\0\4\26\2\0\4\26"+
    "\1\202\11\26\1\203\5\26\1\204\5\26\23\0\2\26"+
    "\4\0\4\26\2\0\24\26\1\205\5\26\23\0\2\26"+
    "\4\0\4\26\2\0\3\26\1\206\26\26\23\0\2\26"+
    "\4\0\4\26\2\0\24\26\1\207\5\26\23\0\2\26"+
    "\4\0\4\26\2\0\5\26\1\210\3\26\1\211\20\26"+
    "\23\0\2\26\4\0\4\26\2\0\11\26\1\212\4\26"+
    "\1\213\13\26\23\0\2\26\4\0\4\26\2\0\24\26"+
    "\1\214\5\26\23\0\2\26\4\0\4\26\2\0\24\26"+
    "\1\215\5\26\23\0\2\26\4\0\4\26\2\0\16\26"+
    "\1\216\13\26\23\0\2\26\4\0\4\26\2\0\1\217"+
    "\31\26\23\0\2\26\4\0\4\26\2\0\16\26\1\157"+
    "\13\26\23\0\2\26\4\0\4\26\2\0\15\26\1\220"+
    "\14\26\23\0\2\26\4\0\4\26\2\0\5\26\1\221"+
    "\24\26\23\0\2\26\4\0\4\26\2\0\22\26\1\222"+
    "\7\26\23\0\2\26\4\0\4\26\2\0\14\26\1\223"+
    "\1\26\1\224\3\26\1\225\7\26\23\0\2\26\4\0"+
    "\4\26\2\0\14\26\1\226\15\26\3\0\12\141\1\227"+
    "\70\141\1\227\4\141\1\230\51\141\16\0\1\143\10\0"+
    "\1\231\61\0\2\144\67\0\2\26\4\0\4\26\2\0"+
    "\11\26\1\232\2\26\1\233\15\26\23\0\2\26\4\0"+
    "\4\26\2\0\7\26\1\234\22\26\23\0\2\26\4\0"+
    "\4\26\2\0\11\26\1\235\20\26\23\0\2\26\4\0"+
    "\4\26\2\0\14\26\1\236\15\26\23\0\2\26\4\0"+
    "\4\26\2\0\5\26\1\237\24\26\23\0\2\26\4\0"+
    "\4\26\2\0\17\26\1\240\12\26\23\0\2\26\4\0"+
    "\4\26\2\0\14\26\1\241\15\26\23\0\2\26\4\0"+
    "\4\26\2\0\11\26\1\242\20\26\23\0\2\26\4\0"+
    "\4\26\2\0\26\26\1\243\3\26\23\0\2\26\4\0"+
    "\4\26\2\0\14\26\1\244\15\26\23\0\2\26\4\0"+
    "\4\26\2\0\11\26\1\245\20\26\23\0\2\26\4\0"+
    "\4\26\2\0\5\26\1\246\24\26\23\0\2\26\4\0"+
    "\4\26\2\0\11\26\1\247\20\26\23\0\2\26\4\0"+
    "\4\26\2\0\5\26\1\111\24\26\23\0\2\26\4\0"+
    "\4\26\2\0\5\26\1\250\24\26\23\0\2\26\4\0"+
    "\4\26\2\0\14\26\1\251\6\26\1\252\6\26\23\0"+
    "\2\26\4\0\4\26\2\0\10\26\1\253\21\26\23\0"+
    "\2\26\4\0\4\26\2\0\24\26\1\254\5\26\23\0"+
    "\2\26\4\0\4\26\2\0\16\26\1\255\13\26\23\0"+
    "\2\26\4\0\4\26\2\0\3\26\1\256\26\26\23\0"+
    "\2\26\4\0\4\26\2\0\17\26\1\257\12\26\23\0"+
    "\2\26\4\0\4\26\2\0\22\26\1\260\7\26\23\0"+
    "\2\26\4\0\4\26\2\0\5\26\1\261\24\26\23\0"+
    "\2\26\4\0\4\26\2\0\17\26\1\262\12\26\23\0"+
    "\2\26\4\0\4\26\2\0\22\26\1\263\7\26\23\0"+
    "\2\26\4\0\4\26\2\0\16\26\1\264\13\26\23\0"+
    "\2\26\4\0\4\26\2\0\5\26\1\265\24\26\23\0"+
    "\2\26\4\0\4\26\2\0\24\26\1\266\5\26\23\0"+
    "\2\26\4\0\4\26\2\0\17\26\1\267\12\26\23\0"+
    "\2\26\4\0\4\26\2\0\5\26\1\270\24\26\23\0"+
    "\2\26\4\0\4\26\2\0\11\26\1\271\20\26\23\0"+
    "\2\26\4\0\4\26\2\0\5\26\1\272\24\26\23\0"+
    "\2\26\4\0\4\26\2\0\23\26\1\273\6\26\23\0"+
    "\2\26\4\0\4\26\2\0\16\26\1\274\13\26\23\0"+
    "\2\26\4\0\4\26\2\0\31\26\1\165\23\0\2\26"+
    "\4\0\4\26\2\0\7\26\1\275\22\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\276\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\1\26\1\277\30\26\23\0\2\26"+
    "\4\0\4\26\2\0\23\26\1\300\6\26\23\0\2\26"+
    "\4\0\4\26\2\0\16\26\1\301\13\26\23\0\2\26"+
    "\4\0\4\26\2\0\20\26\1\302\11\26\23\0\2\26"+
    "\4\0\4\26\2\0\15\26\1\303\14\26\23\0\2\26"+
    "\4\0\4\26\2\0\21\26\1\304\10\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\305\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\24\26\1\306\5\26\23\0\2\26"+
    "\4\0\4\26\2\0\4\26\1\307\25\26\23\0\2\26"+
    "\4\0\4\26\2\0\24\26\1\310\5\26\3\0\12\141"+
    "\1\227\4\141\1\3\51\141\45\0\1\311\43\0\2\26"+
    "\4\0\4\26\2\0\24\26\1\312\5\26\23\0\2\26"+
    "\4\0\4\26\2\0\5\26\1\313\24\26\23\0\2\26"+
    "\4\0\4\26\2\0\1\26\1\314\30\26\23\0\2\26"+
    "\4\0\4\26\2\0\16\26\1\315\13\26\23\0\2\26"+
    "\4\0\4\26\2\0\5\26\1\316\24\26\23\0\2\26"+
    "\4\0\4\26\2\0\16\26\1\317\13\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\320\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\16\26\1\321\13\26\23\0\2\26"+
    "\4\0\4\26\2\0\5\26\1\322\24\26\23\0\2\26"+
    "\4\0\4\26\2\0\1\26\1\323\30\26\23\0\2\26"+
    "\4\0\4\26\2\0\16\26\1\324\13\26\23\0\2\26"+
    "\4\0\4\26\2\0\16\26\1\325\13\26\23\0\2\26"+
    "\4\0\4\26\2\0\5\26\1\326\24\26\23\0\2\26"+
    "\4\0\4\26\2\0\22\26\1\234\7\26\23\0\2\26"+
    "\4\0\4\26\2\0\1\26\1\327\30\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\330\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\1\26\1\331\30\26\23\0\2\26"+
    "\4\0\4\26\2\0\1\26\1\332\30\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\333\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\11\26\1\334\20\26\23\0\2\26"+
    "\4\0\4\26\2\0\11\26\1\335\20\26\23\0\2\26"+
    "\4\0\4\26\2\0\3\26\1\336\26\26\23\0\2\26"+
    "\4\0\4\26\2\0\15\26\1\337\14\26\23\0\2\26"+
    "\4\0\4\26\2\0\24\26\1\340\5\26\23\0\2\26"+
    "\4\0\4\26\2\0\14\26\1\341\15\26\23\0\2\26"+
    "\4\0\4\26\2\0\1\26\1\342\30\26\23\0\2\26"+
    "\4\0\4\26\2\0\22\26\1\343\7\26\23\0\2\26"+
    "\4\0\4\26\2\0\16\26\1\314\13\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\344\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\16\26\1\345\13\26\23\0\2\26"+
    "\4\0\4\26\2\0\11\26\1\346\20\26\23\0\2\26"+
    "\4\0\4\26\2\0\3\26\1\347\26\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\350\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\22\26\1\351\7\26\23\0\2\26"+
    "\4\0\4\26\2\0\3\26\1\273\26\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\352\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\353\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\5\26\1\354\24\26\23\0\2\26"+
    "\4\0\4\26\2\0\20\26\1\355\11\26\23\0\2\26"+
    "\4\0\4\26\2\0\25\26\1\356\4\26\23\0\2\26"+
    "\4\0\4\26\2\0\3\26\1\357\26\26\23\0\2\26"+
    "\4\0\4\26\2\0\11\26\1\360\20\26\23\0\2\26"+
    "\4\0\4\26\2\0\1\26\1\361\30\26\46\0\1\362"+
    "\45\0\2\26\4\0\4\26\2\0\5\26\1\333\24\26"+
    "\23\0\2\26\4\0\4\26\2\0\22\26\1\363\7\26"+
    "\23\0\2\26\4\0\4\26\2\0\1\26\1\333\30\26"+
    "\23\0\2\26\4\0\4\26\2\0\1\26\1\364\30\26"+
    "\23\0\2\26\4\0\4\26\2\0\1\26\1\365\30\26"+
    "\23\0\2\26\4\0\4\26\2\0\4\26\1\366\25\26"+
    "\23\0\2\26\4\0\4\26\2\0\22\26\1\367\7\26"+
    "\23\0\2\26\4\0\4\26\2\0\16\26\1\226\13\26"+
    "\23\0\2\26\4\0\4\26\2\0\5\26\1\314\24\26"+
    "\23\0\2\26\4\0\4\26\2\0\5\26\1\370\24\26"+
    "\23\0\2\26\4\0\4\26\2\0\16\26\1\371\13\26"+
    "\23\0\2\26\4\0\4\26\2\0\23\26\1\333\6\26"+
    "\23\0\2\26\4\0\4\26\2\0\16\26\1\372\13\26"+
    "\23\0\2\26\4\0\4\26\2\0\17\26\1\373\12\26"+
    "\23\0\2\26\4\0\4\26\2\0\15\26\1\374\14\26"+
    "\23\0\2\26\4\0\4\26\2\0\24\26\1\300\5\26"+
    "\23\0\2\26\4\0\4\26\2\0\5\26\1\375\24\26"+
    "\23\0\2\26\4\0\4\26\2\0\22\26\1\376\7\26"+
    "\23\0\2\26\4\0\4\26\2\0\17\26\1\310\12\26"+
    "\23\0\2\26\4\0\4\26\2\0\4\26\1\377\25\26"+
    "\23\0\2\26\4\0\4\26\2\0\1\u0100\31\26\23\0"+
    "\2\26\4\0\4\26\2\0\16\26\1\u0101\13\26\23\0"+
    "\2\26\4\0\4\26\2\0\3\26\1\u0102\26\26\23\0"+
    "\2\26\4\0\4\26\2\0\17\26\1\u0103\12\26\23\0"+
    "\2\26\4\0\4\26\2\0\11\26\1\u0104\20\26\23\0"+
    "\2\26\4\0\4\26\2\0\16\26\1\u0105\13\26\23\0"+
    "\2\26\4\0\4\26\2\0\22\26\1\333\7\26\23\0"+
    "\2\26\4\0\4\26\2\0\22\26\1\u0106\7\26\23\0"+
    "\2\26\4\0\4\26\2\0\17\26\1\u0107\12\26\23\0"+
    "\2\26\4\0\4\26\2\0\5\26\1\257\24\26\23\0"+
    "\2\26\4\0\4\26\2\0\11\26\1\u0108\20\26\23\0"+
    "\2\26\4\0\4\26\2\0\14\26\1\u0109\15\26\23\0"+
    "\2\26\4\0\4\26\2\0\4\26\1\u010a\25\26\50\0"+
    "\1\u010b\43\0\2\26\4\0\4\26\2\0\1\26\1\u010c"+
    "\30\26\23\0\2\26\4\0\4\26\2\0\16\26\1\u010d"+
    "\13\26\23\0\2\26\4\0\4\26\2\0\22\26\1\255"+
    "\7\26\23\0\2\26\4\0\2\26\1\u010e\1\u010f\2\0"+
    "\32\26\23\0\2\26\4\0\4\26\2\0\22\26\1\314"+
    "\7\26\23\0\2\26\4\0\4\26\2\0\4\26\1\324"+
    "\25\26\23\0\2\26\4\0\4\26\2\0\24\26\1\u0110"+
    "\5\26\23\0\2\26\4\0\4\26\2\0\16\26\1\u0111"+
    "\13\26\23\0\2\26\4\0\4\26\2\0\5\26\1\u0112"+
    "\24\26\23\0\2\26\4\0\4\26\2\0\24\26\1\u0113"+
    "\5\26\23\0\2\26\4\0\4\26\2\0\1\26\1\u0114"+
    "\30\26\23\0\2\26\4\0\4\26\2\0\17\26\1\u0115"+
    "\12\26\23\0\2\26\4\0\4\26\2\0\1\26\1\u0116"+
    "\30\26\23\0\2\26\4\0\4\26\2\0\11\26\1\u0117"+
    "\20\26\23\0\2\26\4\0\4\26\2\0\16\26\1\257"+
    "\13\26\23\0\2\26\4\0\4\26\2\0\20\26\1\u0118"+
    "\11\26\23\0\2\26\4\0\4\26\2\0\1\26\1\u0119"+
    "\30\26\23\0\2\26\4\0\4\26\2\0\1\26\1\u011a"+
    "\30\26\23\0\2\26\4\0\4\26\2\0\4\26\1\u011b"+
    "\25\26\23\0\2\26\4\0\4\26\2\0\1\26\1\u011c"+
    "\30\26\23\0\2\26\4\0\4\26\2\0\5\26\1\u011d"+
    "\24\26\63\0\1\u011e\30\0\2\26\4\0\4\26\2\0"+
    "\3\26\1\u011f\1\u0120\25\26\23\0\2\26\4\0\4\26"+
    "\2\0\17\26\1\u0121\12\26\23\0\2\26\4\0\4\26"+
    "\2\0\16\26\1\u0122\13\26\23\0\2\26\4\0\4\26"+
    "\2\0\14\26\1\u0123\15\26\23\0\2\26\4\0\4\26"+
    "\2\0\5\26\1\u0107\24\26\23\0\2\26\4\0\4\26"+
    "\2\0\22\26\1\u0124\7\26\23\0\2\26\4\0\4\26"+
    "\2\0\23\26\1\u0125\6\26\23\0\2\26\4\0\4\26"+
    "\2\0\22\26\1\u0126\7\26\23\0\2\26\4\0\4\26"+
    "\2\0\22\26\1\u0127\7\26\23\0\2\26\4\0\4\26"+
    "\2\0\1\26\1\257\30\26\23\0\2\26\4\0\4\26"+
    "\2\0\1\26\1\u0128\30\26\23\0\2\26\4\0\4\26"+
    "\2\0\24\26\1\u0129\5\26\23\0\2\26\4\0\4\26"+
    "\2\0\1\26\1\u012a\30\26\23\0\2\26\4\0\4\26"+
    "\2\0\4\26\1\u0120\25\26\23\0\2\26\4\0\4\26"+
    "\2\0\22\26\1\u012b\7\26\56\0\1\u012c\35\0\2\26"+
    "\4\0\4\26\2\0\11\26\1\u012d\20\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\u012e\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\24\26\1\u012f\5\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\u0122\12\26\23\0\2\26"+
    "\4\0\4\26\2\0\1\26\1\u0130\30\26\23\0\2\26"+
    "\4\0\4\26\2\0\1\26\1\310\30\26\23\0\2\26"+
    "\4\0\4\26\2\0\22\26\1\u0131\7\26\23\0\2\26"+
    "\4\0\4\26\2\0\14\26\1\u0132\15\26\23\0\2\26"+
    "\4\0\4\26\2\0\25\26\1\u0133\4\26\23\0\2\26"+
    "\4\0\4\26\2\0\4\26\1\257\25\26\23\0\2\26"+
    "\4\0\4\26\2\0\17\26\1\u0134\12\26\32\0\1\231"+
    "\61\0\2\26\4\0\4\26\2\0\17\26\1\u0135\12\26"+
    "\23\0\2\26\4\0\4\26\2\0\22\26\1\310\7\26"+
    "\23\0\2\26\4\0\4\26\2\0\12\26\1\356\17\26"+
    "\23\0\2\26\4\0\4\26\2\0\1\26\1\u0136\30\26"+
    "\23\0\2\26\4\0\4\26\2\0\22\26\1\u0137\7\26"+
    "\23\0\2\26\4\0\4\26\2\0\16\26\1\u0107\13\26"+
    "\23\0\2\26\4\0\4\26\2\0\16\26\1\u0138\13\26"+
    "\23\0\2\26\4\0\4\26\2\0\1\26\1\u0107\30\26"+
    "\23\0\2\26\4\0\4\26\2\0\21\26\1\u0139\10\26"+
    "\23\0\2\26\4\0\4\26\2\0\25\26\1\u013a\4\26"+
    "\23\0\2\26\4\0\4\26\2\0\5\26\1\310\24\26"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15105];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\7\11\3\1\1\11"+
    "\4\1\2\11\23\1\1\11\1\1\1\11\1\0\1\11"+
    "\1\0\1\1\1\0\1\1\3\11\50\1\1\11\2\0"+
    "\64\1\1\0\1\1\1\0\57\1\1\0\50\1\1\0"+
    "\30\1\1\0\22\1\1\0\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 59: break;
          case 3:
            { return token(yytext(), "operador_diferente", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 4:
            { return token(yytext(), "operador_and", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 5:
            { return token(yytext(), "parentesis_a", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 6:
            { return token(yytext(), "parentesis_c", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 7:
            { return token(yytext(), "operador_multiplicacion", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 8:
            { return token(yytext(), "operador_suma", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 9:
            { return token(yytext(), "coma", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 10:
            { return token(yytext(), "operador_resta", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 11:
            { return token(yytext(), "punto", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 12:
            { return token(yytext(), "operador_division", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 13:
            { return token(yytext(), "numero_entero", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 14:
            { return token(yytext(), "doblePunto", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 15:
            { return token(yytext(), "operador_menorque", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 16:
            { return token(yytext(), "operador_asignacion", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 17:
            { return token(yytext(), "operador_mayorque", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 18:
            { return token(yytext(), "error", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 19:
            { return token(yytext(), "corchete_a", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          case 20:
            { return token(yytext(), "corchete_c", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 21:
            { return token(yytext(), "reservada_inicio", yyline, yycolumn);
            }
            // fall through
          case 78: break;
          case 22:
            { return token(yytext(), "llaves_a", yyline, yycolumn);
            }
            // fall through
          case 79: break;
          case 23:
            { return token(yytext(), "llaves_c", yyline, yycolumn);
            }
            // fall through
          case 80: break;
          case 24:
            { return token(yytext(), "valor_cadena", yyline, yycolumn);
            }
            // fall through
          case 81: break;
          case 25:
            { return token(yytext(), "operador_menoroigual", yyline, yycolumn);
            }
            // fall through
          case 82: break;
          case 26:
            { return token(yytext(), "operador_equivalencia", yyline, yycolumn);
            }
            // fall through
          case 83: break;
          case 27:
            { return token(yytext(), "operador_mayoroigual", yyline, yycolumn);
            }
            // fall through
          case 84: break;
          case 28:
            { return token(yytext(), "identificador", yyline, yycolumn);
            }
            // fall through
          case 85: break;
          case 29:
            { return token(yytext(), "reservada_no", yyline, yycolumn);
            }
            // fall through
          case 86: break;
          case 30:
            { return token(yytext(), "reservada_si", yyline, yycolumn);
            }
            // fall through
          case 87: break;
          case 31:
            { return token(yytext(), "operador_or", yyline, yycolumn);
            }
            // fall through
          case 88: break;
          case 32:
            { return token(yytext(), "numero_decimal", yyline, yycolumn);
            }
            // fall through
          case 89: break;
          case 33:
            { return token(yytext(), "funcion_trig", yyline, yycolumn);
            }
            // fall through
          case 90: break;
          case 34:
            { return token(yytext(), "funcion_dos", yyline, yycolumn);
            }
            // fall through
          case 91: break;
          case 35:
            { return token(yytext(), "reservada_fin", yyline, yycolumn);
            }
            // fall through
          case 92: break;
          case 36:
            { return token(yytext(), "reservada_caso", yyline, yycolumn);
            }
            // fall through
          case 93: break;
          case 37:
            { return token(yytext(), "dato_entero", yyline, yycolumn);
            }
            // fall through
          case 94: break;
          case 38:
            { return token(yytext(), "reservada_leer", yyline, yycolumn);
            }
            // fall through
          case 95: break;
          case 39:
            { return token(yytext(), "entidad_unica", yyline, yycolumn);
            }
            // fall through
          case 96: break;
          case 40:
            { return token(yytext(), "funciones_entidad", yyline, yycolumn);
            }
            // fall through
          case 97: break;
          case 41:
            { return token(yytext(), "reservada_ciclo", yyline, yycolumn);
            }
            // fall through
          case 98: break;
          case 42:
            { return token(yytext(), "bool_f", yyline, yycolumn);
            }
            // fall through
          case 99: break;
          case 43:
            { return token(yytext(), "dato_fecha", yyline, yycolumn);
            }
            // fall through
          case 100: break;
          case 44:
            { return token(yytext(), "entidades", yyline, yycolumn);
            }
            // fall through
          case 101: break;
          case 45:
            { return token(yytext(), "rango_entidad", yyline, yycolumn);
            }
            // fall through
          case 102: break;
          case 46:
            { return token(yytext(), "reservada_si_no", yyline, yycolumn);
            }
            // fall through
          case 103: break;
          case 47:
            { return token(yytext(), "dato_cadena", yyline, yycolumn);
            }
            // fall through
          case 104: break;
          case 48:
            { return token(yytext(), "reservada_opcion", yyline, yycolumn);
            }
            // fall through
          case 105: break;
          case 49:
            { return token(yytext(), "dato_decimal", yyline, yycolumn);
            }
            // fall through
          case 106: break;
          case 50:
            { return token(yytext(), "reservada_funcion", yyline, yycolumn);
            }
            // fall through
          case 107: break;
          case 51:
            { return token(yytext(), "reservada_imprime", yyline, yycolumn);
            }
            // fall through
          case 108: break;
          case 52:
            { return token(yytext(), "reservada_retorna", yyline, yycolumn);
            }
            // fall through
          case 109: break;
          case 53:
            { return token(yytext(), "dato_booleano", yyline, yycolumn);
            }
            // fall through
          case 110: break;
          case 54:
            { return token(yytext(), "reservada_mientras", yyline, yycolumn);
            }
            // fall through
          case 111: break;
          case 55:
            { return token(yytext(), "conversion", yyline, yycolumn);
            }
            // fall through
          case 112: break;
          case 56:
            { return token(yytext(), "reservada_principal", yyline, yycolumn);
            }
            // fall through
          case 113: break;
          case 57:
            { return token(yytext(), "bool_v", yyline, yycolumn);
            }
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
