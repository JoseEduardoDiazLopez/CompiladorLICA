// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\4\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\11\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\3\27\1\30\1\31\1\32"+
    "\24\27\1\33\1\0\1\34\1\0\1\35\1\0\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\27\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\7\0\1\3\73\0\1\27"+
    "\7\0\1\27\3\0\1\27\3\0\1\27\1\0\1\27"+
    "\6\0\1\27\1\0\1\27\4\0\1\27\7\0\1\27"+
    "\3\0\1\27\3\0\1\27\1\0\1\27\6\0\1\27"+
    "\1\0\1\27\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\23\23"+
    "\1\26\1\1\1\27\1\0\1\30\1\0\1\2\1\0"+
    "\1\23\1\31\1\32\1\33\1\34\27\23\1\35\10\23"+
    "\1\36\6\23\1\37\2\0\1\23\1\40\12\23\1\41"+
    "\5\23\1\42\2\23\1\43\26\23\1\41\10\23\1\0"+
    "\1\2\1\0\6\23\1\44\16\23\1\45\4\23\1\46"+
    "\24\23\1\47\1\0\2\23\1\50\3\23\1\51\7\23"+
    "\1\52\1\53\1\23\1\54\10\23\1\47\4\23\1\55"+
    "\2\23\1\56\6\23\1\0\2\23\1\57\7\23\1\60"+
    "\4\23\1\61\5\23\1\62\3\23\1\0\5\23\1\63"+
    "\1\64\6\23\1\65\4\23\1\0\2\23\1\66\3\23"+
    "\1\67\11\23\1\70\2\23\1\71\1\23\1\72\6\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\164\0\72\0\72\0\256\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\350\0\u0122"+
    "\0\u015c\0\72\0\72\0\u0196\0\u01d0\0\u020a\0\u0244\0\72"+
    "\0\72\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da"+
    "\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa"+
    "\0\u05e4\0\u061e\0\u0658\0\u0692\0\72\0\u06cc\0\72\0\256"+
    "\0\72\0\u0706\0\u0740\0\u077a\0\u015c\0\72\0\72\0\72"+
    "\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a"+
    "\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea"+
    "\0\u0244\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050"+
    "\0\72\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6"+
    "\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u0244"+
    "\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u0244\0\u14d8\0\u1512"+
    "\0\u0244\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8"+
    "\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878"+
    "\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48"+
    "\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18"+
    "\0\u1c52\0\u108a\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae"+
    "\0\u1de8\0\u0244\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44"+
    "\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114"+
    "\0\u0244\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u0244\0\u2236\0\u2270"+
    "\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440"+
    "\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610"+
    "\0\u264a\0\u2684\0\u0244\0\u26be\0\u26f8\0\u2732\0\u0244\0\u276c"+
    "\0\u27a6\0\u27e0\0\u0244\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902"+
    "\0\u293c\0\u2976\0\u0244\0\u0244\0\u29b0\0\u0244\0\u29ea\0\u2a24"+
    "\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4"+
    "\0\u2c2e\0\u2c68\0\u2ca2\0\u0244\0\u2cdc\0\u2d16\0\u0244\0\u2d50"+
    "\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20"+
    "\0\u0244\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6"+
    "\0\u0244\0\u30f0\0\u312a\0\u3164\0\u319e\0\u0244\0\u31d8\0\u3212"+
    "\0\u324c\0\u3286\0\u32c0\0\u0244\0\u32fa\0\u3334\0\u336e\0\u33a8"+
    "\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u0244\0\u0244\0\u3504"+
    "\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u0244\0\u3660\0\u369a"+
    "\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc\0\u0244\0\u37f6\0\u3830"+
    "\0\u386a\0\u0244\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6"+
    "\0\u3a00\0\u3a3a\0\u3a74\0\u0244\0\u3aae\0\u3ae8\0\u0244\0\u3b22"+
    "\0\u0244\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\4\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\27\1\42\1\27\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\27\1\51\1\52\1\53\1\27\1\54"+
    "\3\27\1\55\1\56\1\57\74\0\1\3\70\0\2\60"+
    "\1\0\1\60\2\0\1\61\10\0\2\60\5\0\4\60"+
    "\2\0\32\60\15\0\1\62\4\0\1\63\70\0\1\64"+
    "\1\0\2\65\66\0\1\64\1\0\2\21\75\0\1\66"+
    "\71\0\1\67\71\0\1\70\64\0\2\27\5\0\4\27"+
    "\2\0\32\27\23\0\2\27\5\0\4\71\2\0\32\71"+
    "\23\0\2\27\5\0\4\27\2\0\3\27\1\72\14\27"+
    "\1\73\11\27\23\0\2\27\5\0\4\27\2\0\17\27"+
    "\1\74\12\27\23\0\2\27\5\0\4\27\2\0\1\27"+
    "\1\75\7\27\1\76\5\27\1\77\12\27\23\0\2\27"+
    "\5\0\4\27\2\0\5\27\1\100\24\27\23\0\2\27"+
    "\5\0\4\27\2\0\16\27\1\101\4\27\1\102\3\27"+
    "\1\103\2\27\23\0\2\27\5\0\4\27\2\0\1\27"+
    "\1\104\3\27\1\105\3\27\1\106\2\27\1\107\5\27"+
    "\1\110\2\27\1\111\4\27\23\0\2\27\5\0\4\27"+
    "\2\0\11\27\1\112\20\27\23\0\2\27\5\0\4\27"+
    "\2\0\15\27\1\113\1\114\13\27\23\0\2\27\5\0"+
    "\4\27\2\0\11\27\1\115\20\27\23\0\2\27\5\0"+
    "\4\27\2\0\5\27\1\116\24\27\23\0\2\27\5\0"+
    "\4\27\2\0\11\27\1\117\5\27\1\120\12\27\23\0"+
    "\2\27\5\0\4\27\2\0\17\27\1\121\12\27\23\0"+
    "\2\27\5\0\4\27\2\0\2\27\1\122\15\27\1\123"+
    "\11\27\23\0\2\27\5\0\4\27\2\0\17\27\1\124"+
    "\2\27\1\125\7\27\23\0\2\27\5\0\4\27\2\0"+
    "\1\27\1\126\3\27\1\127\11\27\1\130\12\27\23\0"+
    "\2\27\5\0\4\27\2\0\5\27\1\131\3\27\1\132"+
    "\20\27\23\0\2\27\5\0\4\27\2\0\1\27\1\133"+
    "\3\27\1\134\3\27\1\135\5\27\1\136\12\27\23\0"+
    "\2\27\5\0\4\27\2\0\5\27\1\137\11\27\1\140"+
    "\12\27\73\0\1\141\1\0\12\142\1\143\57\142\2\63"+
    "\1\3\1\63\1\4\65\63\16\0\1\144\1\0\2\145"+
    "\70\0\2\71\5\0\4\71\2\0\32\71\23\0\2\27"+
    "\5\0\4\27\2\0\5\27\1\146\24\27\23\0\2\27"+
    "\5\0\4\27\2\0\1\27\1\147\30\27\23\0\2\27"+
    "\5\0\4\27\2\0\2\27\1\150\14\27\1\151\12\27"+
    "\23\0\2\27\5\0\4\27\2\0\4\27\1\152\16\27"+
    "\1\153\6\27\23\0\2\27\5\0\4\27\2\0\3\27"+
    "\1\154\10\27\1\155\15\27\23\0\2\27\5\0\4\27"+
    "\2\0\16\27\1\156\1\157\3\27\1\160\6\27\23\0"+
    "\2\27\5\0\4\27\2\0\6\27\1\161\15\27\1\162"+
    "\5\27\23\0\2\27\5\0\4\27\2\0\3\27\1\163"+
    "\20\27\1\164\5\27\23\0\2\27\5\0\4\27\2\0"+
    "\20\27\1\165\11\27\23\0\2\27\5\0\4\27\2\0"+
    "\20\27\1\166\11\27\23\0\2\27\5\0\4\27\2\0"+
    "\14\27\1\167\15\27\23\0\2\27\5\0\4\27\2\0"+
    "\3\27\1\170\26\27\23\0\2\27\5\0\4\27\2\0"+
    "\16\27\1\171\13\27\23\0\2\27\5\0\4\27\2\0"+
    "\17\27\1\172\12\27\23\0\2\27\5\0\4\27\2\0"+
    "\5\27\1\173\24\27\23\0\2\27\5\0\4\27\2\0"+
    "\16\27\1\174\13\27\23\0\2\27\5\0\4\27\2\0"+
    "\22\27\1\175\7\27\23\0\2\27\5\0\4\27\2\0"+
    "\20\27\1\176\11\27\23\0\2\27\5\0\4\27\2\0"+
    "\11\27\1\177\16\27\1\200\1\27\23\0\2\27\5\0"+
    "\4\27\2\0\14\27\1\201\15\27\23\0\2\27\5\0"+
    "\4\27\2\0\5\27\1\202\24\27\23\0\2\27\5\0"+
    "\4\27\2\0\5\27\1\203\24\27\23\0\2\27\5\0"+
    "\4\27\2\0\4\27\1\204\11\27\1\205\5\27\1\206"+
    "\5\27\23\0\2\27\5\0\4\27\2\0\24\27\1\207"+
    "\5\27\23\0\2\27\5\0\4\27\2\0\3\27\1\210"+
    "\26\27\23\0\2\27\5\0\4\27\2\0\24\27\1\211"+
    "\5\27\23\0\2\27\5\0\4\27\2\0\5\27\1\212"+
    "\3\27\1\213\20\27\23\0\2\27\5\0\4\27\2\0"+
    "\11\27\1\214\4\27\1\215\13\27\23\0\2\27\5\0"+
    "\4\27\2\0\24\27\1\216\5\27\23\0\2\27\5\0"+
    "\4\27\2\0\24\27\1\217\5\27\23\0\2\27\5\0"+
    "\4\27\2\0\16\27\1\220\13\27\23\0\2\27\5\0"+
    "\4\27\2\0\1\221\31\27\23\0\2\27\5\0\4\27"+
    "\2\0\16\27\1\160\13\27\23\0\2\27\5\0\4\27"+
    "\2\0\15\27\1\222\14\27\23\0\2\27\5\0\4\27"+
    "\2\0\5\27\1\223\24\27\23\0\2\27\5\0\4\27"+
    "\2\0\22\27\1\224\7\27\23\0\2\27\5\0\4\27"+
    "\2\0\14\27\1\225\1\27\1\226\3\27\1\227\7\27"+
    "\23\0\2\27\5\0\4\27\2\0\14\27\1\230\15\27"+
    "\3\0\12\142\1\231\71\142\1\231\4\142\1\232\52\142"+
    "\16\0\1\144\11\0\1\233\61\0\2\145\70\0\2\27"+
    "\5\0\4\27\2\0\11\27\1\234\2\27\1\235\15\27"+
    "\23\0\2\27\5\0\4\27\2\0\7\27\1\236\22\27"+
    "\23\0\2\27\5\0\4\27\2\0\11\27\1\237\20\27"+
    "\23\0\2\27\5\0\4\27\2\0\14\27\1\240\15\27"+
    "\23\0\2\27\5\0\4\27\2\0\5\27\1\241\24\27"+
    "\23\0\2\27\5\0\4\27\2\0\17\27\1\242\12\27"+
    "\23\0\2\27\5\0\4\27\2\0\14\27\1\243\15\27"+
    "\23\0\2\27\5\0\4\27\2\0\11\27\1\244\20\27"+
    "\23\0\2\27\5\0\4\27\2\0\26\27\1\245\3\27"+
    "\23\0\2\27\5\0\4\27\2\0\14\27\1\246\15\27"+
    "\23\0\2\27\5\0\4\27\2\0\11\27\1\247\20\27"+
    "\23\0\2\27\5\0\4\27\2\0\5\27\1\250\24\27"+
    "\23\0\2\27\5\0\4\27\2\0\11\27\1\251\20\27"+
    "\23\0\2\27\5\0\4\27\2\0\5\27\1\112\24\27"+
    "\23\0\2\27\5\0\4\27\2\0\5\27\1\252\24\27"+
    "\23\0\2\27\5\0\4\27\2\0\14\27\1\253\6\27"+
    "\1\254\6\27\23\0\2\27\5\0\4\27\2\0\10\27"+
    "\1\255\21\27\23\0\2\27\5\0\4\27\2\0\24\27"+
    "\1\256\5\27\23\0\2\27\5\0\4\27\2\0\16\27"+
    "\1\257\13\27\23\0\2\27\5\0\4\27\2\0\3\27"+
    "\1\260\26\27\23\0\2\27\5\0\4\27\2\0\17\27"+
    "\1\261\12\27\23\0\2\27\5\0\4\27\2\0\22\27"+
    "\1\262\7\27\23\0\2\27\5\0\4\27\2\0\3\27"+
    "\1\263\26\27\23\0\2\27\5\0\4\27\2\0\5\27"+
    "\1\264\24\27\23\0\2\27\5\0\4\27\2\0\17\27"+
    "\1\265\12\27\23\0\2\27\5\0\4\27\2\0\22\27"+
    "\1\266\7\27\23\0\2\27\5\0\4\27\2\0\16\27"+
    "\1\267\13\27\23\0\2\27\5\0\4\27\2\0\5\27"+
    "\1\270\24\27\23\0\2\27\5\0\4\27\2\0\24\27"+
    "\1\271\5\27\23\0\2\27\5\0\4\27\2\0\17\27"+
    "\1\272\12\27\23\0\2\27\5\0\4\27\2\0\5\27"+
    "\1\273\24\27\23\0\2\27\5\0\4\27\2\0\11\27"+
    "\1\274\20\27\23\0\2\27\5\0\4\27\2\0\5\27"+
    "\1\275\24\27\23\0\2\27\5\0\4\27\2\0\23\27"+
    "\1\276\6\27\23\0\2\27\5\0\4\27\2\0\16\27"+
    "\1\277\13\27\23\0\2\27\5\0\4\27\2\0\31\27"+
    "\1\166\23\0\2\27\5\0\4\27\2\0\7\27\1\300"+
    "\22\27\23\0\2\27\5\0\4\27\2\0\17\27\1\301"+
    "\12\27\23\0\2\27\5\0\4\27\2\0\1\27\1\302"+
    "\30\27\23\0\2\27\5\0\4\27\2\0\23\27\1\303"+
    "\6\27\23\0\2\27\5\0\4\27\2\0\16\27\1\304"+
    "\13\27\23\0\2\27\5\0\4\27\2\0\20\27\1\305"+
    "\11\27\23\0\2\27\5\0\4\27\2\0\15\27\1\306"+
    "\14\27\23\0\2\27\5\0\4\27\2\0\21\27\1\307"+
    "\10\27\23\0\2\27\5\0\4\27\2\0\17\27\1\310"+
    "\12\27\23\0\2\27\5\0\4\27\2\0\24\27\1\311"+
    "\5\27\23\0\2\27\5\0\4\27\2\0\4\27\1\312"+
    "\25\27\23\0\2\27\5\0\4\27\2\0\24\27\1\313"+
    "\5\27\3\0\12\142\1\231\4\142\1\3\52\142\46\0"+
    "\1\314\43\0\2\27\5\0\4\27\2\0\24\27\1\315"+
    "\5\27\23\0\2\27\5\0\4\27\2\0\5\27\1\316"+
    "\24\27\23\0\2\27\5\0\4\27\2\0\1\27\1\317"+
    "\30\27\23\0\2\27\5\0\4\27\2\0\16\27\1\320"+
    "\13\27\23\0\2\27\5\0\4\27\2\0\5\27\1\321"+
    "\24\27\23\0\2\27\5\0\4\27\2\0\16\27\1\322"+
    "\13\27\23\0\2\27\5\0\4\27\2\0\17\27\1\323"+
    "\12\27\23\0\2\27\5\0\4\27\2\0\16\27\1\324"+
    "\13\27\23\0\2\27\5\0\4\27\2\0\5\27\1\325"+
    "\24\27\23\0\2\27\5\0\4\27\2\0\1\27\1\326"+
    "\30\27\23\0\2\27\5\0\4\27\2\0\16\27\1\327"+
    "\13\27\23\0\2\27\5\0\4\27\2\0\16\27\1\330"+
    "\13\27\23\0\2\27\5\0\4\27\2\0\5\27\1\331"+
    "\24\27\23\0\2\27\5\0\4\27\2\0\22\27\1\236"+
    "\7\27\23\0\2\27\5\0\4\27\2\0\1\27\1\332"+
    "\30\27\23\0\2\27\5\0\4\27\2\0\17\27\1\333"+
    "\12\27\23\0\2\27\5\0\4\27\2\0\1\27\1\334"+
    "\30\27\23\0\2\27\5\0\4\27\2\0\1\27\1\335"+
    "\30\27\23\0\2\27\5\0\4\27\2\0\17\27\1\336"+
    "\12\27\23\0\2\27\5\0\4\27\2\0\11\27\1\337"+
    "\20\27\23\0\2\27\5\0\4\27\2\0\11\27\1\340"+
    "\20\27\23\0\2\27\5\0\4\27\2\0\11\27\1\341"+
    "\20\27\23\0\2\27\5\0\4\27\2\0\3\27\1\342"+
    "\26\27\23\0\2\27\5\0\4\27\2\0\15\27\1\343"+
    "\14\27\23\0\2\27\5\0\4\27\2\0\24\27\1\344"+
    "\5\27\23\0\2\27\5\0\4\27\2\0\14\27\1\345"+
    "\15\27\23\0\2\27\5\0\4\27\2\0\1\27\1\346"+
    "\30\27\23\0\2\27\5\0\4\27\2\0\22\27\1\347"+
    "\7\27\23\0\2\27\5\0\4\27\2\0\16\27\1\317"+
    "\13\27\23\0\2\27\5\0\4\27\2\0\17\27\1\350"+
    "\12\27\23\0\2\27\5\0\4\27\2\0\16\27\1\351"+
    "\13\27\23\0\2\27\5\0\4\27\2\0\11\27\1\352"+
    "\20\27\23\0\2\27\5\0\4\27\2\0\3\27\1\353"+
    "\26\27\23\0\2\27\5\0\4\27\2\0\17\27\1\354"+
    "\12\27\23\0\2\27\5\0\4\27\2\0\22\27\1\355"+
    "\7\27\23\0\2\27\5\0\4\27\2\0\3\27\1\276"+
    "\26\27\23\0\2\27\5\0\4\27\2\0\17\27\1\356"+
    "\12\27\23\0\2\27\5\0\4\27\2\0\17\27\1\357"+
    "\12\27\23\0\2\27\5\0\4\27\2\0\5\27\1\360"+
    "\24\27\23\0\2\27\5\0\4\27\2\0\20\27\1\361"+
    "\11\27\23\0\2\27\5\0\4\27\2\0\25\27\1\362"+
    "\4\27\23\0\2\27\5\0\4\27\2\0\3\27\1\363"+
    "\26\27\23\0\2\27\5\0\4\27\2\0\11\27\1\364"+
    "\20\27\23\0\2\27\5\0\4\27\2\0\1\27\1\365"+
    "\30\27\47\0\1\366\45\0\2\27\5\0\4\27\2\0"+
    "\5\27\1\336\24\27\23\0\2\27\5\0\4\27\2\0"+
    "\22\27\1\367\7\27\23\0\2\27\5\0\4\27\2\0"+
    "\1\27\1\336\30\27\23\0\2\27\5\0\4\27\2\0"+
    "\1\27\1\370\30\27\23\0\2\27\5\0\4\27\2\0"+
    "\1\27\1\371\30\27\23\0\2\27\5\0\4\27\2\0"+
    "\4\27\1\372\25\27\23\0\2\27\5\0\4\27\2\0"+
    "\22\27\1\373\7\27\23\0\2\27\5\0\4\27\2\0"+
    "\16\27\1\230\13\27\23\0\2\27\5\0\4\27\2\0"+
    "\5\27\1\317\24\27\23\0\2\27\5\0\4\27\2\0"+
    "\5\27\1\374\24\27\23\0\2\27\5\0\4\27\2\0"+
    "\16\27\1\375\13\27\23\0\2\27\5\0\4\27\2\0"+
    "\23\27\1\336\6\27\23\0\2\27\5\0\4\27\2\0"+
    "\16\27\1\376\13\27\23\0\2\27\5\0\4\27\2\0"+
    "\17\27\1\377\12\27\23\0\2\27\5\0\4\27\2\0"+
    "\15\27\1\u0100\14\27\23\0\2\27\5\0\4\27\2\0"+
    "\17\27\1\u0101\12\27\23\0\2\27\5\0\4\27\2\0"+
    "\24\27\1\303\5\27\23\0\2\27\5\0\4\27\2\0"+
    "\5\27\1\u0102\24\27\23\0\2\27\5\0\4\27\2\0"+
    "\22\27\1\u0103\7\27\23\0\2\27\5\0\4\27\2\0"+
    "\17\27\1\313\12\27\23\0\2\27\5\0\4\27\2\0"+
    "\4\27\1\u0104\25\27\23\0\2\27\5\0\4\27\2\0"+
    "\1\u0105\31\27\23\0\2\27\5\0\4\27\2\0\16\27"+
    "\1\u0106\13\27\23\0\2\27\5\0\4\27\2\0\3\27"+
    "\1\u0107\26\27\23\0\2\27\5\0\4\27\2\0\17\27"+
    "\1\u0108\12\27\23\0\2\27\5\0\4\27\2\0\11\27"+
    "\1\u0109\20\27\23\0\2\27\5\0\4\27\2\0\16\27"+
    "\1\u010a\13\27\23\0\2\27\5\0\4\27\2\0\22\27"+
    "\1\336\7\27\23\0\2\27\5\0\4\27\2\0\22\27"+
    "\1\u010b\7\27\23\0\2\27\5\0\4\27\2\0\17\27"+
    "\1\u010c\12\27\23\0\2\27\5\0\4\27\2\0\5\27"+
    "\1\261\24\27\23\0\2\27\5\0\4\27\2\0\11\27"+
    "\1\u010d\20\27\23\0\2\27\5\0\4\27\2\0\14\27"+
    "\1\u010e\15\27\23\0\2\27\5\0\4\27\2\0\4\27"+
    "\1\u010f\25\27\51\0\1\u0110\43\0\2\27\5\0\4\27"+
    "\2\0\1\27\1\u0111\30\27\23\0\2\27\5\0\4\27"+
    "\2\0\16\27\1\u0112\13\27\23\0\2\27\5\0\4\27"+
    "\2\0\22\27\1\257\7\27\23\0\2\27\5\0\2\27"+
    "\1\u0113\1\u0114\2\0\32\27\23\0\2\27\5\0\4\27"+
    "\2\0\22\27\1\317\7\27\23\0\2\27\5\0\4\27"+
    "\2\0\4\27\1\327\25\27\23\0\2\27\5\0\4\27"+
    "\2\0\24\27\1\u0115\5\27\23\0\2\27\5\0\4\27"+
    "\2\0\16\27\1\u0116\13\27\23\0\2\27\5\0\4\27"+
    "\2\0\5\27\1\u0117\24\27\23\0\2\27\5\0\4\27"+
    "\2\0\24\27\1\u0118\5\27\23\0\2\27\5\0\4\27"+
    "\2\0\1\27\1\u0119\30\27\23\0\2\27\5\0\4\27"+
    "\2\0\17\27\1\u011a\12\27\23\0\2\27\5\0\4\27"+
    "\2\0\1\27\1\u011b\30\27\23\0\2\27\5\0\4\27"+
    "\2\0\11\27\1\u011c\20\27\23\0\2\27\5\0\4\27"+
    "\2\0\16\27\1\261\13\27\23\0\2\27\5\0\4\27"+
    "\2\0\20\27\1\u011d\11\27\23\0\2\27\5\0\4\27"+
    "\2\0\1\27\1\u011e\30\27\23\0\2\27\5\0\4\27"+
    "\2\0\1\27\1\u011f\30\27\23\0\2\27\5\0\4\27"+
    "\2\0\4\27\1\u0120\25\27\23\0\2\27\5\0\4\27"+
    "\2\0\1\27\1\u0121\30\27\23\0\2\27\5\0\4\27"+
    "\2\0\5\27\1\u0122\24\27\64\0\1\u0123\30\0\2\27"+
    "\5\0\4\27\2\0\3\27\1\u0124\1\u0125\25\27\23\0"+
    "\2\27\5\0\4\27\2\0\17\27\1\u0126\12\27\23\0"+
    "\2\27\5\0\4\27\2\0\16\27\1\u0127\13\27\23\0"+
    "\2\27\5\0\4\27\2\0\14\27\1\u0128\15\27\23\0"+
    "\2\27\5\0\4\27\2\0\5\27\1\u010c\24\27\23\0"+
    "\2\27\5\0\4\27\2\0\22\27\1\u0129\7\27\23\0"+
    "\2\27\5\0\4\27\2\0\23\27\1\u012a\6\27\23\0"+
    "\2\27\5\0\4\27\2\0\22\27\1\u012b\7\27\23\0"+
    "\2\27\5\0\4\27\2\0\22\27\1\u012c\7\27\23\0"+
    "\2\27\5\0\4\27\2\0\1\27\1\261\30\27\23\0"+
    "\2\27\5\0\4\27\2\0\1\27\1\u012d\30\27\23\0"+
    "\2\27\5\0\4\27\2\0\24\27\1\u012e\5\27\23\0"+
    "\2\27\5\0\4\27\2\0\1\27\1\u012f\30\27\23\0"+
    "\2\27\5\0\4\27\2\0\4\27\1\u0125\25\27\23\0"+
    "\2\27\5\0\4\27\2\0\22\27\1\u0130\7\27\57\0"+
    "\1\u0131\35\0\2\27\5\0\4\27\2\0\11\27\1\u0132"+
    "\20\27\23\0\2\27\5\0\4\27\2\0\17\27\1\u0133"+
    "\12\27\23\0\2\27\5\0\4\27\2\0\24\27\1\u0134"+
    "\5\27\23\0\2\27\5\0\4\27\2\0\17\27\1\u0127"+
    "\12\27\23\0\2\27\5\0\4\27\2\0\1\27\1\u0135"+
    "\30\27\23\0\2\27\5\0\4\27\2\0\1\27\1\313"+
    "\30\27\23\0\2\27\5\0\4\27\2\0\22\27\1\u0136"+
    "\7\27\23\0\2\27\5\0\4\27\2\0\14\27\1\u0137"+
    "\15\27\23\0\2\27\5\0\4\27\2\0\25\27\1\u0138"+
    "\4\27\23\0\2\27\5\0\4\27\2\0\4\27\1\261"+
    "\25\27\23\0\2\27\5\0\4\27\2\0\17\27\1\u0139"+
    "\12\27\33\0\1\233\61\0\2\27\5\0\4\27\2\0"+
    "\17\27\1\u013a\12\27\23\0\2\27\5\0\4\27\2\0"+
    "\22\27\1\313\7\27\23\0\2\27\5\0\4\27\2\0"+
    "\12\27\1\362\17\27\23\0\2\27\5\0\4\27\2\0"+
    "\1\27\1\u013b\30\27\23\0\2\27\5\0\4\27\2\0"+
    "\22\27\1\u013c\7\27\23\0\2\27\5\0\4\27\2\0"+
    "\16\27\1\u010c\13\27\23\0\2\27\5\0\4\27\2\0"+
    "\16\27\1\u013d\13\27\23\0\2\27\5\0\4\27\2\0"+
    "\1\27\1\u010c\30\27\23\0\2\27\5\0\4\27\2\0"+
    "\21\27\1\u013e\10\27\23\0\2\27\5\0\4\27\2\0"+
    "\25\27\1\u013f\4\27\23\0\2\27\5\0\4\27\2\0"+
    "\5\27\1\313\24\27\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15544];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\7\11\3\1\2\11"+
    "\4\1\2\11\23\1\1\11\1\1\1\11\1\0\1\11"+
    "\1\0\1\1\1\0\1\1\3\11\50\1\1\11\2\0"+
    "\65\1\1\0\1\1\1\0\60\1\1\0\51\1\1\0"+
    "\31\1\1\0\22\1\1\0\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 60: break;
          case 3:
            { return token(yytext(), "operador_diferente", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 4:
            { return token(yytext(), "operador_and", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 5:
            { return token(yytext(), "parentesis_a", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 6:
            { return token(yytext(), "parentesis_c", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 7:
            { return token(yytext(), "operador_multiplicacion", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 8:
            { return token(yytext(), "operador_suma", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 9:
            { return token(yytext(), "coma", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 10:
            { return token(yytext(), "operador_resta", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 11:
            { return token(yytext(), "punto", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 12:
            { return token(yytext(), "operador_division", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 13:
            { return token(yytext(), "numero_entero", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 14:
            { return token(yytext(), "doblePunto", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 15:
            { return token(yytext(), "puntoYcoma", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 16:
            { return token(yytext(), "operador_menorque", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 17:
            { return token(yytext(), "operador_asignacion", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 18:
            { return token(yytext(), "operador_mayorque", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          case 19:
            { return token(yytext(), "error", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 20:
            { return token(yytext(), "corchete_a", yyline, yycolumn);
            }
            // fall through
          case 78: break;
          case 21:
            { return token(yytext(), "corchete_c", yyline, yycolumn);
            }
            // fall through
          case 79: break;
          case 22:
            { return token(yytext(), "llaves_a", yyline, yycolumn);
            }
            // fall through
          case 80: break;
          case 23:
            { return token(yytext(), "llaves_c", yyline, yycolumn);
            }
            // fall through
          case 81: break;
          case 24:
            { return token(yytext(), "valor_cadena", yyline, yycolumn);
            }
            // fall through
          case 82: break;
          case 25:
            { return token(yytext(), "operador_menoroigual", yyline, yycolumn);
            }
            // fall through
          case 83: break;
          case 26:
            { return token(yytext(), "operador_equivalencia", yyline, yycolumn);
            }
            // fall through
          case 84: break;
          case 27:
            { return token(yytext(), "operador_mayoroigual", yyline, yycolumn);
            }
            // fall through
          case 85: break;
          case 28:
            { return token(yytext(), "identificador", yyline, yycolumn);
            }
            // fall through
          case 86: break;
          case 29:
            { return token(yytext(), "reservada_no", yyline, yycolumn);
            }
            // fall through
          case 87: break;
          case 30:
            { return token(yytext(), "reservada_si", yyline, yycolumn);
            }
            // fall through
          case 88: break;
          case 31:
            { return token(yytext(), "operador_or", yyline, yycolumn);
            }
            // fall through
          case 89: break;
          case 32:
            { return token(yytext(), "numero_decimal", yyline, yycolumn);
            }
            // fall through
          case 90: break;
          case 33:
            { return token(yytext(), "funcion_trig", yyline, yycolumn);
            }
            // fall through
          case 91: break;
          case 34:
            { return token(yytext(), "funcion_dos", yyline, yycolumn);
            }
            // fall through
          case 92: break;
          case 35:
            { return token(yytext(), "reservada_fin", yyline, yycolumn);
            }
            // fall through
          case 93: break;
          case 36:
            { return token(yytext(), "reservada_caso", yyline, yycolumn);
            }
            // fall through
          case 94: break;
          case 37:
            { return token(yytext(), "dato_entero", yyline, yycolumn);
            }
            // fall through
          case 95: break;
          case 38:
            { return token(yytext(), "reservada_leer", yyline, yycolumn);
            }
            // fall through
          case 96: break;
          case 39:
            { return token(yytext(), "entidad_unica", yyline, yycolumn);
            }
            // fall through
          case 97: break;
          case 40:
            { return token(yytext(), "funciones_entidad", yyline, yycolumn);
            }
            // fall through
          case 98: break;
          case 41:
            { return token(yytext(), "reservada_ciclo", yyline, yycolumn);
            }
            // fall through
          case 99: break;
          case 42:
            { return token(yytext(), "bool_f", yyline, yycolumn);
            }
            // fall through
          case 100: break;
          case 43:
            { return token(yytext(), "dato_fecha", yyline, yycolumn);
            }
            // fall through
          case 101: break;
          case 44:
            { return token(yytext(), "entidades", yyline, yycolumn);
            }
            // fall through
          case 102: break;
          case 45:
            { return token(yytext(), "rango_entidad", yyline, yycolumn);
            }
            // fall through
          case 103: break;
          case 46:
            { return token(yytext(), "reservada_si_no", yyline, yycolumn);
            }
            // fall through
          case 104: break;
          case 47:
            { return token(yytext(), "dato_cadena", yyline, yycolumn);
            }
            // fall through
          case 105: break;
          case 48:
            { return token(yytext(), "reservada_inicio", yyline, yycolumn);
            }
            // fall through
          case 106: break;
          case 49:
            { return token(yytext(), "reservada_opcion", yyline, yycolumn);
            }
            // fall through
          case 107: break;
          case 50:
            { return token(yytext(), "dato_decimal", yyline, yycolumn);
            }
            // fall through
          case 108: break;
          case 51:
            { return token(yytext(), "reservada_funcion", yyline, yycolumn);
            }
            // fall through
          case 109: break;
          case 52:
            { return token(yytext(), "reservada_imprime", yyline, yycolumn);
            }
            // fall through
          case 110: break;
          case 53:
            { return token(yytext(), "reservada_retorna", yyline, yycolumn);
            }
            // fall through
          case 111: break;
          case 54:
            { return token(yytext(), "dato_booleano", yyline, yycolumn);
            }
            // fall through
          case 112: break;
          case 55:
            { return token(yytext(), "reservada_mientras", yyline, yycolumn);
            }
            // fall through
          case 113: break;
          case 56:
            { return token(yytext(), "conversion", yyline, yycolumn);
            }
            // fall through
          case 114: break;
          case 57:
            { return token(yytext(), "reservada_principal", yyline, yycolumn);
            }
            // fall through
          case 115: break;
          case 58:
            { return token(yytext(), "bool_v", yyline, yycolumn);
            }
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
