// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\1\2\1\0\1\3\30\0\1\4\1\0"+
    "\2\5\1\6\1\7\1\0\1\7\1\10\1\11\1\12"+
    "\11\13\1\5\1\0\1\14\1\15\1\16\2\0\3\17"+
    "\1\20\1\21\1\22\24\17\1\5\1\0\1\5\1\0"+
    "\1\23\1\0\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\17\1\52\1\53\1\54\1\5\1\55\1\5\7\0"+
    "\1\2\73\0\1\17\7\0\1\17\3\0\1\17\3\0"+
    "\1\17\1\0\1\17\6\0\1\17\1\0\1\17\4\0"+
    "\1\17\7\0\1\17\3\0\1\17\3\0\1\17\1\0"+
    "\1\17\6\0\1\17\1\0\1\17\u012b\0\2\2\326\0"+
    "\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\2\2\2\4\1\2\23\5"+
    "\1\2\1\0\1\6\1\0\30\5\1\7\10\5\1\7"+
    "\5\5\2\0\2\6\1\5\1\4\11\5\1\1\7\5"+
    "\1\10\26\5\1\1\6\5\1\0\1\6\1\0\21\5"+
    "\1\11\4\5\1\12\20\5\1\0\4\5\1\13\10\5"+
    "\1\14\7\5\1\14\3\5\1\15\2\5\1\16\4\5"+
    "\1\0\21\5\1\0\13\5\1\0\16\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\56\0\56\0\212\0\270\0\346"+
    "\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256"+
    "\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6"+
    "\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536"+
    "\0\u0564\0\u0114\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8"+
    "\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958"+
    "\0\u0986\0\u0170\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a"+
    "\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a"+
    "\0\u0c38\0\u0c66\0\56\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c"+
    "\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0170"+
    "\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0170"+
    "\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140"+
    "\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0"+
    "\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420"+
    "\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u0c38\0\u1562"+
    "\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2"+
    "\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842"+
    "\0\u1870\0\u0170\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u0170\0\u1956"+
    "\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6"+
    "\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36"+
    "\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u0170\0\u1d1c\0\u1d4a\0\u1d78"+
    "\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u0170\0\u1e8c\0\u1eba"+
    "\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a"+
    "\0\u2058\0\u0170\0\u2086\0\u20b4\0\u0170\0\u20e2\0\u2110\0\u213e"+
    "\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae"+
    "\0\u22dc\0\u230a\0\u2338\0\u2366\0\u2394\0\u23c2\0\u23f0\0\u241e"+
    "\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532\0\u2560\0\u258e"+
    "\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2\0\u26d0\0\u26fe"+
    "\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4\0\u2812\0\u2840\0\u286e"+
    "\0\u289c\0\u28ca\0\u28f8\0\u2926\0\u2954\0\u2982";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\0\1\3\1\4\1\5\1\4\1\6\1\2"+
    "\1\7\1\10\1\11\1\12\2\6\5\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\13\1\23\1\13"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\13\1\32"+
    "\1\33\1\34\1\13\1\35\3\13\1\36\57\0\1\2"+
    "\71\0\1\4\46\0\1\37\2\0\1\40\54\0\1\41"+
    "\1\0\2\42\52\0\1\41\1\0\2\11\57\0\2\4"+
    "\51\0\2\13\3\0\36\13\13\0\2\13\3\0\7\13"+
    "\1\43\14\13\1\44\11\13\13\0\2\13\3\0\23\13"+
    "\1\45\12\13\13\0\2\13\3\0\5\13\1\46\7\13"+
    "\1\47\5\13\1\50\12\13\13\0\2\13\3\0\11\13"+
    "\1\51\24\13\13\0\2\13\3\0\22\13\1\52\4\13"+
    "\1\53\3\13\1\54\2\13\13\0\2\13\3\0\5\13"+
    "\1\55\3\13\1\56\3\13\1\57\2\13\1\60\5\13"+
    "\1\61\2\13\1\62\4\13\13\0\2\13\3\0\15\13"+
    "\1\63\20\13\13\0\2\13\3\0\21\13\1\64\1\65"+
    "\13\13\13\0\2\13\3\0\15\13\1\66\20\13\13\0"+
    "\2\13\3\0\11\13\1\67\24\13\13\0\2\13\3\0"+
    "\15\13\1\70\5\13\1\71\12\13\13\0\2\13\3\0"+
    "\23\13\1\72\12\13\13\0\2\13\3\0\6\13\1\73"+
    "\15\13\1\74\11\13\13\0\2\13\3\0\23\13\1\75"+
    "\2\13\1\76\7\13\13\0\2\13\3\0\5\13\1\77"+
    "\3\13\1\100\11\13\1\101\12\13\13\0\2\13\3\0"+
    "\11\13\1\102\3\13\1\103\20\13\13\0\2\13\3\0"+
    "\5\13\1\104\3\13\1\105\3\13\1\106\5\13\1\107"+
    "\12\13\13\0\2\13\3\0\11\13\1\110\24\13\56\0"+
    "\1\4\6\111\1\112\47\111\1\40\1\113\1\40\1\114"+
    "\52\40\10\0\1\115\1\0\2\116\54\0\2\13\3\0"+
    "\11\13\1\117\24\13\13\0\2\13\3\0\5\13\1\120"+
    "\30\13\13\0\2\13\3\0\6\13\1\121\27\13\13\0"+
    "\2\13\3\0\10\13\1\122\16\13\1\123\6\13\13\0"+
    "\2\13\3\0\7\13\1\124\10\13\1\125\15\13\13\0"+
    "\2\13\3\0\22\13\1\126\1\127\3\13\1\130\6\13"+
    "\13\0\2\13\3\0\12\13\1\131\15\13\1\132\5\13"+
    "\13\0\2\13\3\0\7\13\1\133\20\13\1\134\5\13"+
    "\13\0\2\13\3\0\24\13\1\135\11\13\13\0\2\13"+
    "\3\0\24\13\1\130\11\13\13\0\2\13\3\0\20\13"+
    "\1\136\15\13\13\0\2\13\3\0\7\13\1\137\26\13"+
    "\13\0\2\13\3\0\22\13\1\140\13\13\13\0\2\13"+
    "\3\0\23\13\1\141\12\13\13\0\2\13\3\0\11\13"+
    "\1\142\24\13\13\0\2\13\3\0\22\13\1\143\13\13"+
    "\13\0\2\13\3\0\26\13\1\144\7\13\13\0\2\13"+
    "\3\0\24\13\1\145\11\13\13\0\2\13\3\0\15\13"+
    "\1\146\16\13\1\147\1\13\13\0\2\13\3\0\20\13"+
    "\1\150\15\13\13\0\2\13\3\0\11\13\1\151\24\13"+
    "\13\0\2\13\3\0\11\13\1\152\24\13\13\0\2\13"+
    "\3\0\10\13\1\153\11\13\1\154\5\13\1\155\5\13"+
    "\13\0\2\13\3\0\30\13\1\156\5\13\13\0\2\13"+
    "\3\0\7\13\1\157\26\13\13\0\2\13\3\0\30\13"+
    "\1\160\5\13\13\0\2\13\3\0\11\13\1\161\3\13"+
    "\1\162\20\13\13\0\2\13\3\0\15\13\1\163\4\13"+
    "\1\164\13\13\13\0\2\13\3\0\30\13\1\165\5\13"+
    "\13\0\2\13\3\0\30\13\1\166\5\13\13\0\2\13"+
    "\3\0\22\13\1\167\13\13\13\0\2\13\3\0\4\13"+
    "\1\170\31\13\13\0\2\13\3\0\22\13\1\130\13\13"+
    "\13\0\2\13\3\0\21\13\1\171\14\13\13\0\2\13"+
    "\3\0\11\13\1\172\24\13\13\0\2\13\3\0\26\13"+
    "\1\173\7\13\13\0\2\13\3\0\20\13\1\174\1\13"+
    "\1\175\13\13\1\0\6\111\1\176\55\111\1\176\2\111"+
    "\1\177\44\111\1\0\1\113\64\0\1\115\7\0\1\200"+
    "\47\0\2\116\54\0\2\13\3\0\15\13\1\201\2\13"+
    "\1\202\15\13\13\0\2\13\3\0\13\13\1\203\22\13"+
    "\13\0\2\13\3\0\15\13\1\204\20\13\13\0\2\13"+
    "\3\0\11\13\1\205\24\13\13\0\2\13\3\0\23\13"+
    "\1\130\12\13\13\0\2\13\3\0\20\13\1\206\15\13"+
    "\13\0\2\13\3\0\15\13\1\207\20\13\13\0\2\13"+
    "\3\0\32\13\1\210\3\13\13\0\2\13\3\0\20\13"+
    "\1\211\15\13\13\0\2\13\3\0\15\13\1\212\20\13"+
    "\13\0\2\13\3\0\11\13\1\213\24\13\13\0\2\13"+
    "\3\0\15\13\1\214\20\13\13\0\2\13\3\0\11\13"+
    "\1\63\24\13\13\0\2\13\3\0\11\13\1\215\24\13"+
    "\13\0\2\13\3\0\20\13\1\216\15\13\13\0\2\13"+
    "\3\0\14\13\1\203\21\13\13\0\2\13\3\0\30\13"+
    "\1\217\5\13\13\0\2\13\3\0\22\13\1\220\13\13"+
    "\13\0\2\13\3\0\7\13\1\221\26\13\13\0\2\13"+
    "\3\0\23\13\1\222\12\13\13\0\2\13\3\0\26\13"+
    "\1\223\7\13\13\0\2\13\3\0\7\13\1\224\26\13"+
    "\13\0\2\13\3\0\11\13\1\225\24\13\13\0\2\13"+
    "\3\0\23\13\1\226\12\13\13\0\2\13\3\0\26\13"+
    "\1\227\7\13\13\0\2\13\3\0\22\13\1\230\13\13"+
    "\13\0\2\13\3\0\11\13\1\231\24\13\13\0\2\13"+
    "\3\0\30\13\1\232\5\13\13\0\2\13\3\0\23\13"+
    "\1\233\12\13\13\0\2\13\3\0\11\13\1\104\24\13"+
    "\13\0\2\13\3\0\15\13\1\234\20\13\13\0\2\13"+
    "\3\0\11\13\1\235\24\13\13\0\2\13\3\0\27\13"+
    "\1\157\6\13\13\0\2\13\3\0\22\13\1\236\13\13"+
    "\13\0\2\13\3\0\35\13\1\130\13\0\2\13\3\0"+
    "\13\13\1\237\22\13\13\0\2\13\3\0\23\13\1\240"+
    "\12\13\13\0\2\13\3\0\5\13\1\74\30\13\13\0"+
    "\2\13\3\0\27\13\1\241\6\13\13\0\2\13\3\0"+
    "\22\13\1\242\13\13\13\0\2\13\3\0\24\13\1\243"+
    "\11\13\13\0\2\13\3\0\21\13\1\244\14\13\13\0"+
    "\2\13\3\0\25\13\1\245\10\13\13\0\2\13\3\0"+
    "\23\13\1\246\12\13\13\0\2\13\3\0\30\13\1\247"+
    "\5\13\1\0\6\111\1\176\2\111\1\113\44\111\34\0"+
    "\1\250\33\0\2\13\3\0\30\13\1\251\5\13\13\0"+
    "\2\13\3\0\11\13\1\252\24\13\13\0\2\13\3\0"+
    "\5\13\1\130\30\13\13\0\2\13\3\0\22\13\1\253"+
    "\13\13\13\0\2\13\3\0\22\13\1\254\13\13\13\0"+
    "\2\13\3\0\23\13\1\255\12\13\13\0\2\13\3\0"+
    "\22\13\1\256\13\13\13\0\2\13\3\0\11\13\1\257"+
    "\24\13\13\0\2\13\3\0\5\13\1\260\30\13\13\0"+
    "\2\13\3\0\22\13\1\261\13\13\13\0\2\13\3\0"+
    "\22\13\1\262\13\13\13\0\2\13\3\0\11\13\1\263"+
    "\24\13\13\0\2\13\3\0\26\13\1\203\7\13\13\0"+
    "\2\13\3\0\5\13\1\264\30\13\13\0\2\13\3\0"+
    "\5\13\1\265\30\13\13\0\2\13\3\0\23\13\1\266"+
    "\12\13\13\0\2\13\3\0\15\13\1\267\20\13\13\0"+
    "\2\13\3\0\15\13\1\270\20\13\13\0\2\13\3\0"+
    "\15\13\1\271\20\13\13\0\2\13\3\0\7\13\1\272"+
    "\26\13\13\0\2\13\3\0\21\13\1\273\14\13\13\0"+
    "\2\13\3\0\30\13\1\274\5\13\13\0\2\13\3\0"+
    "\20\13\1\220\15\13\13\0\2\13\3\0\5\13\1\275"+
    "\30\13\13\0\2\13\3\0\26\13\1\276\7\13\13\0"+
    "\2\13\3\0\23\13\1\277\12\13\13\0\2\13\3\0"+
    "\22\13\1\300\13\13\13\0\2\13\3\0\7\13\1\301"+
    "\26\13\13\0\2\13\3\0\23\13\1\302\12\13\13\0"+
    "\2\13\3\0\26\13\1\303\7\13\13\0\2\13\3\0"+
    "\23\13\1\304\12\13\13\0\2\13\3\0\23\13\1\305"+
    "\12\13\13\0\2\13\3\0\11\13\1\306\24\13\13\0"+
    "\2\13\3\0\24\13\1\144\11\13\13\0\2\13\3\0"+
    "\31\13\1\307\4\13\13\0\2\13\3\0\7\13\1\310"+
    "\26\13\13\0\2\13\3\0\15\13\1\311\20\13\33\0"+
    "\1\312\35\0\2\13\3\0\11\13\1\266\24\13\13\0"+
    "\2\13\3\0\26\13\1\313\7\13\13\0\2\13\3\0"+
    "\5\13\1\266\30\13\13\0\2\13\3\0\5\13\1\222"+
    "\30\13\13\0\2\13\3\0\10\13\1\314\25\13\13\0"+
    "\2\13\3\0\26\13\1\315\7\13\13\0\2\13\3\0"+
    "\22\13\1\316\13\13\13\0\2\13\3\0\11\13\1\130"+
    "\24\13\13\0\2\13\3\0\11\13\1\317\24\13\13\0"+
    "\2\13\3\0\22\13\1\320\13\13\13\0\2\13\3\0"+
    "\27\13\1\266\6\13\13\0\2\13\3\0\22\13\1\321"+
    "\13\13\13\0\2\13\3\0\23\13\1\104\12\13\13\0"+
    "\2\13\3\0\21\13\1\322\14\13\13\0\2\13\3\0"+
    "\23\13\1\140\12\13\13\0\2\13\3\0\30\13\1\241"+
    "\5\13\13\0\2\13\3\0\11\13\1\323\24\13\13\0"+
    "\2\13\3\0\26\13\1\324\7\13\13\0\2\13\3\0"+
    "\10\13\1\325\25\13\13\0\2\13\3\0\4\13\1\326"+
    "\31\13\13\0\2\13\3\0\22\13\1\222\13\13\13\0"+
    "\2\13\3\0\7\13\1\327\26\13\13\0\2\13\3\0"+
    "\15\13\1\330\20\13\13\0\2\13\3\0\22\13\1\203"+
    "\13\13\13\0\2\13\3\0\26\13\1\266\7\13\13\0"+
    "\2\13\3\0\26\13\1\331\7\13\13\0\2\13\3\0"+
    "\11\13\1\222\24\13\13\0\2\13\3\0\15\13\1\332"+
    "\20\13\13\0\2\13\3\0\20\13\1\333\15\13\35\0"+
    "\1\334\33\0\2\13\3\0\5\13\1\335\30\13\13\0"+
    "\2\13\3\0\26\13\1\220\7\13\13\0\2\13\3\0"+
    "\2\13\1\336\1\337\32\13\13\0\2\13\3\0\30\13"+
    "\1\266\5\13\13\0\2\13\3\0\26\13\1\130\7\13"+
    "\13\0\2\13\3\0\10\13\1\261\25\13\13\0\2\13"+
    "\3\0\30\13\1\307\5\13\13\0\2\13\3\0\11\13"+
    "\1\227\24\13\13\0\2\13\3\0\30\13\1\340\5\13"+
    "\13\0\2\13\3\0\5\13\1\341\30\13\13\0\2\13"+
    "\3\0\23\13\1\342\12\13\13\0\2\13\3\0\5\13"+
    "\1\343\30\13\13\0\2\13\3\0\15\13\1\254\20\13"+
    "\13\0\2\13\3\0\24\13\1\344\11\13\13\0\2\13"+
    "\3\0\5\13\1\345\30\13\13\0\2\13\3\0\10\13"+
    "\1\346\25\13\13\0\2\13\3\0\5\13\1\347\30\13"+
    "\50\0\1\350\20\0\2\13\3\0\7\13\1\157\1\241"+
    "\25\13\13\0\2\13\3\0\22\13\1\351\13\13\13\0"+
    "\2\13\3\0\20\13\1\352\15\13\13\0\2\13\3\0"+
    "\26\13\1\353\7\13\13\0\2\13\3\0\27\13\1\255"+
    "\6\13\13\0\2\13\3\0\26\13\1\253\7\13\13\0"+
    "\2\13\3\0\26\13\1\354\7\13\13\0\2\13\3\0"+
    "\5\13\1\355\30\13\13\0\2\13\3\0\30\13\1\356"+
    "\5\13\13\0\2\13\3\0\5\13\1\357\30\13\13\0"+
    "\2\13\3\0\10\13\1\241\25\13\43\0\1\360\25\0"+
    "\2\13\3\0\30\13\1\130\5\13\13\0\2\13\3\0"+
    "\23\13\1\351\12\13\13\0\2\13\3\0\5\13\1\361"+
    "\30\13\13\0\2\13\3\0\26\13\1\362\7\13\13\0"+
    "\2\13\3\0\20\13\1\140\15\13\13\0\2\13\3\0"+
    "\31\13\1\363\4\13\13\0\2\13\3\0\10\13\1\222"+
    "\25\13\21\0\1\200\47\0\2\13\3\0\16\13\1\307"+
    "\17\13\13\0\2\13\3\0\5\13\1\364\30\13\13\0"+
    "\2\13\3\0\26\13\1\254\7\13\13\0\2\13\3\0"+
    "\22\13\1\365\13\13\13\0\2\13\3\0\25\13\1\366"+
    "\10\13\13\0\2\13\3\0\31\13\1\251\4\13\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10672];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\31\1\1\0\1\1\1\0"+
    "\47\1\2\0\1\11\62\1\1\0\1\1\1\0\47\1"+
    "\1\0\41\1\1\0\21\1\1\0\13\1\1\0\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignorar*/
            }
            // fall through
          case 15: break;
          case 2:
            { return textColor(yychar, yylength(), new Color(202,86, 0));
            }
            // fall through
          case 16: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(244, 0, 255));
            }
            // fall through
          case 17: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(255,255, 255));
            }
            // fall through
          case 18: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(0,255, 255));
            }
            // fall through
          case 19: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(146, 146, 146));
            }
            // fall through
          case 20: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(202, 30, 0));
            }
            // fall through
          case 21: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(202,200, 0));
            }
            // fall through
          case 22: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(6, 90, 158));
            }
            // fall through
          case 23: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(9, 110, 51));
            }
            // fall through
          case 24: break;
          case 11:
            { return textColor(yychar, yylength(), new Color(0, 0, 255));
            }
            // fall through
          case 25: break;
          case 12:
            { return textColor(yychar, yylength(), new Color(0, 255, 0));
            }
            // fall through
          case 26: break;
          case 13:
            { return textColor(yychar, yylength(), new Color(242,80, 5));
            }
            // fall through
          case 27: break;
          case 14:
            { return textColor(yychar, yylength(), new Color(202, 31, 0));
            }
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
